pluginManagement {
    def reactNativeGradlePluginPath = new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).parentFile
    includeBuild(reactNativeGradlePluginPath.toString().replace("%20", " ")) // Handle spaces in paths
}

plugins {
    id("com.facebook.react.settings")
}

// Keep the rest of your configuration but add path sanitization
def safeFile(path) {
    new File(path.toString().replace("%20", " ")) 
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
    if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
        ex.autolinkLibrariesFromCommand()
    } else {
        def command = [
            'node',
            '--no-warnings',
            '--eval',
            'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
            'react-native-config',
            '--json',
            '--platform',
            'android'
        ].toList()
        ex.autolinkLibrariesFromCommand(command)
    }
}

rootProject.name = 'Test-Redux-App'

dependencyResolutionManagement {
    versionCatalogs {
        reactAndroidLibs {
            def reactNativePath = ["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()
            from(files(safeFile("${reactNativePath}/../gradle/libs.versions.toml")))
        }
    }
}

def expoPackagePath = ["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim()
apply from: safeFile("${expoPackagePath}/../scripts/autolinking.gradle")
useExpoModules()

include ':app'

def gradlePluginPath = ["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()
includeBuild(safeFile(gradlePluginPath).parentFile)